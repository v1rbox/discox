import asyncio
import random

from bot.base import Command
from bot.config import Config, Embed


class cmd(Command):
    """Allows us to play tic tac toe with the bot"""

    name = "tic-tac-toe"
    usage = "tic-tac-toe <command>"
    description = "Allows us to play tic tac toe with the bot\nUse 'info' to learn how to play, and use 'single-player' to generate a new board to play against bot, use 'multi-player' to play against a friend"

    # Takes a character and returns corresponding emoji
    def switch_to_emoji(self, value):
        switch = {
            1: "1️⃣",
            2: "2️⃣",
            3: "3️⃣",
            4: "4️⃣",
            5: "5️⃣",
            6: "6️⃣",
            7: "7️⃣",
            8: "8️⃣",
            9: "9️⃣",
            "X": "❌",
            "O": "⭕",
        }
        return switch.get(value, None)

    # Takes a emoji and returns corresponding number-1
    def switch_to_number(self, value):
        switch = {
            "1️⃣": 0,
            "2️⃣": 1,
            "3️⃣": 2,
            "4️⃣": 3,
            "5️⃣": 4,
            "6️⃣": 5,
            "7️⃣": 6,
            "8️⃣": 7,
            "9️⃣": 8,
        }

        return switch.get(value, None)

    # Radom and valid value generated by bot
    def board_value(self, board):
        value = None
        while True:
            value = random.randint(0, 8)
            if board[value] != "X" and board[value] != "O":
                break
        return value

    def draw_board(self, board):
        no_of_units = 9
        string = ""
        for i in range(no_of_units):
            string = string + self.switch_to_emoji(board[i])
            if (i == 2) or (i == 5):
                string = string + "\n"
        return string

    # Checks user Input
    def check(self, reaction, board, id, message_id):
        if id != message_id:
            return None
        reaction_decoded = self.switch_to_number(reaction)
        if reaction_decoded == None:
            return None
        if (board[int(reaction_decoded)] != "X") and (
            board[int(reaction_decoded)] != "O"
        ):
            return int(reaction_decoded)
        else:
            return None

    def check_win(self, board, player):
        is_playing = True
        if player == "X":
            player = "O"
        else:
            player = "X"
        # Checking Diagonal elements
        if board[0] == board[4] and board[0] == board[8]:
            is_playing = False
            return (is_playing, player)
        if board[2] == board[4] and board[2] == board[6]:
            is_playing = False
            return (is_playing, player)

        for i in range(len(board)):
            if (
                (i == 0 or i == 3 or i == 6)
                and (board[i] == board[i + 1])
                and (board[i] == board[i + 2])
            ):
                is_playing = False
                return (is_playing, player)
            if (
                (i == 0 or i == 1 or i == 2)
                and (board[i] == board[i + 3])
                and (board[i] == board[i + 6])
            ):
                is_playing = False
                return (is_playing, player)

        temp = False
        for i in range(len(board)):
            if board[i] != "X" and board[i] != "O":
                temp = True
                break
        if temp == False:
            is_playing = False
            return (is_playing, None)
        return (is_playing, None)

    async def execute(self, arguments, message) -> None:

        # Generates info
        if arguments[0] == "info":

            embed = Embed(
                title="Tic Tac Toe",
                description=f"To Play a Tic Tac Toe Game with the bot type `{Config.prefix}tic-tac-toe single-player`\n.To play against a friend type `{Config.prefix} multi-player`\n. To make a move react with the appropiate emoji",
            )
            await message.channel.send(embed=embed)

        # Single player
        elif arguments[0] == "single-player":

            # Variables that store various game data
            board = [1, 2, 3, 4, 5, 6, 7, 8, 9]
            is_playing = True
            player = "X"

            # Set up the Embed
            embed = Embed(
                title="Tic Tac Toe", description="Generating board please wait..."
            )
            message = await message.channel.send(embed=embed)
            id = int(message.id)

            # adds reaction so that user has to not search for it
            for i in range(len(board)):
                await message.add_reaction(self.switch_to_emoji(i + 1))

            # game loop
            while is_playing:

                is_playing, winner = self.check_win(board, player)
                if is_playing == False:
                    embed = Embed(
                        title=f"{winner} won the game, thanks for playing!",
                        description=self.draw_board(board),
                    )
                    if winner == None:
                        embed = Embed(
                            title=f"It's a draw thanks for playing",
                            description=self.draw_board(board),
                        )
                    await message.edit(content="", embed=embed)
                    break

                embed = Embed(title="Tic Tac Toe", description=self.draw_board(board))
                await message.edit(content="", embed=embed)

                if player == "O":
                    # The bot plays a move
                    player = "X"
                    board[self.board_value(board)] = "O"
                    continue

                try:
                    reaction, user = await self.bot.wait_for(
                        "reaction_add", timeout=60.0, check=None
                    )

                    # Checks if the emoji user reacted with is valid
                    reaction_decoded = self.check(
                        str(reaction.emoji), board, id, int(reaction.message.id)
                    )
                    if reaction_decoded != None:
                        # Updates the board with new value
                        board[reaction_decoded] = "X"
                        player = "O"
                    else:
                        pass

                except asyncio.TimeoutError:

                    # If user fails to react within 60 seconds
                    is_playing = False
                    embed = Embed(
                        title="Tic Tac Toe",
                        description="Your time is up please restart the game",
                    )
                    await message.edit(embed=embed)

        # Multi player
        elif arguments[0] == "multi-player":

            # Variables that store various game data
            board = [1, 2, 3, 4, 5, 6, 7, 8, 9]
            is_playing = True
            player = "X"

            # Set up the Embed
            embed = Embed(
                title="Tic Tac Toe", description="Generating board please wait..."
            )
            message = await message.channel.send(embed=embed)
            id = int(message.id)

            # adds reaction so that user has to not search for it
            for i in range(len(board)):
                await message.add_reaction(self.switch_to_emoji(i + 1))

            # game loop
            while is_playing:

                is_playing, winner = self.check_win(board, player)
                if is_playing == False:
                    embed = Embed(
                        title=f"{winner} won the game, thanks for playing!",
                        description=self.draw_board(board),
                    )
                    if winner == None:
                        embed = Embed(
                            title=f"It's a draw thanks for playing",
                            description=self.draw_board(board),
                        )
                    await message.edit(content="", embed=embed)
                    break

                embed = Embed(
                    title="Tic Tac Toe",
                    description=f"`{player}'s turn`\n{self.draw_board(board)}",
                )
                await message.edit(content="", embed=embed)

                try:
                    reaction, user = await self.bot.wait_for(
                        "reaction_add", timeout=60.0, check=None
                    )

                    # Checks if the emoji user reacted with is valid
                    reaction_decoded = self.check(
                        str(reaction.emoji), board, id, int(reaction.message.id)
                    )
                    if reaction_decoded != None:
                        # Updates the board with new value
                        if player == "X":
                            board[reaction_decoded] = "X"
                            player = "O"
                        else:
                            board[reaction_decoded] = "O"
                            player = "X"
                    else:
                        pass

                except asyncio.TimeoutError:

                    # If user fails to react within 60 seconds
                    is_playing = False
                    embed = Embed(
                        title="Tic Tac Toe",
                        description="Your time is up please restart the game",
                    )
                    await message.edit(embed=embed)

        else:
            raise KeyError(f"Command {arguments[0]} not found.")
